options
{
 LOOKAHEAD=1;
}
PARSER_BEGIN(Calculator)
public class Calculator
{
 public static void main(String args[]) throws ParseException {
Calculator myCalc = new Calculator(System.in);
SimpleNode root = myCalc.Expression(); // devolve referência para o nó raiz da árvore

root.dump(""); // imprime no ecrã a árvore
 }
}
PARSER_END(Calculator)
SKIP :
{
" " | "\r" | "\t"
}
TOKEN:
{
 < INTEGER: (["0"-"9"])+ >
| < LF: "\n" >
}
SimpleNode Expression(): {}
{
 Expr1() <LF> {return jjtThis;} // código Java entre chavetas
}
void Expr1(): {}
{
 Expr2(1)
 [
 ("+" {jjtThis.Op = MyConstants.ADD;}
 | "-" {jjtThis.Op = MyConstants.SUB;}
 )
Expr2(1)
]
}

void Expr2(int sign): {} // 1: positive; -1: negative, por causa do operador unitário „-„
{
 Expr3(sign)
 [
 ("*" {jjtThis.Op = MyConstants.MUL;}
 | "/" {jjtThis.Op = MyConstants.DIV;}
 )
 Expr3(1)
 ]
}
void Expr3(int sign): {Token t;}
{
 t=<INTEGER>
{
jjtThis.val = sign *Integer.parseInt(t.image);
}
 | "-" Expr3(-1)
 | "(" Expr1() ")"
}

